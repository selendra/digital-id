"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../index");
describe("infoSystem", () => {
    it("should return the information of the system", () => __awaiter(this, void 0, void 0, function* () {
        const returnedInformation = index_1.informationType("system");
        const expectedInformation = { System: ["OS", "CPU", "Memory"] };
        expect(returnedInformation).toEqual(expectedInformation);
    }));
});
describe("infoBinaries", () => {
    it("should return the information of the binaries", () => __awaiter(this, void 0, void 0, function* () {
        const returnedInformation = index_1.informationType("binaries");
        const expectedInformation = { Binaries: ["Node", "Yarn", "npm"] };
        expect(returnedInformation).toEqual(expectedInformation);
    }));
});
describe("infoBrowsers", () => {
    it("should return the information of the browsers installed", () => __awaiter(this, void 0, void 0, function* () {
        const returnedInformation = index_1.informationType("browsers");
        const expectedInformation = { Browsers: ["Chrome", "Firefox", "Safari"] };
        expect(returnedInformation).toEqual(expectedInformation);
    }));
});
describe("infoNpmGlobal", () => {
    it("should return the information of the NPM global packages", () => __awaiter(this, void 0, void 0, function* () {
        const returnedInformation = index_1.informationType("npmg");
        const expectedInformation = { npmGlobalPackages: ["webpack", "webpack-cli"] };
        expect(returnedInformation).toEqual(expectedInformation);
    }));
});
describe("infoNpm", () => {
    it("should return the information of the NPM packages (webpack)", () => __awaiter(this, void 0, void 0, function* () {
        const returnedInformation = index_1.informationType("npmPackages");
        const expectedInformation = { npmPackages: "*webpack*" };
        expect(returnedInformation).toEqual(expectedInformation);
    }));
});
//# sourceMappingURL=index.test.js.map