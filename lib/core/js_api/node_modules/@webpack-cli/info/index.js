"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const envinfo = require("envinfo");
const process = require("process");
const options_1 = require("./options");
const commands_1 = require("./commands");
const configParser_1 = require("./configParser");
const renderTable_1 = require("./renderTable");
const CONFIG = {};
const DEFAULT_DETAILS = {
    Binaries: ['Node', 'Yarn', 'npm'],
    Browsers: ['Chrome', 'Firefox', 'Safari'],
    System: ['OS', 'CPU', 'Memory'],
    npmGlobalPackages: ['webpack', 'webpack-cli'],
    npmPackages: '*webpack*',
};
let DETAILS_OBJ = {};
function informationType(type) {
    switch (type) {
        case 'system':
            return { System: ['OS', 'CPU', 'Memory'] };
        case 'binaries':
            return { Binaries: ['Node', 'Yarn', 'npm'] };
        case 'browsers':
            return { Browsers: ['Chrome', 'Firefox', 'Safari'] };
        case 'npmg':
            return { npmGlobalPackages: ['webpack', 'webpack-cli'] };
        case 'npmPackages':
            return { npmPackages: '*webpack*' };
    }
}
exports.informationType = informationType;
function info(CustomArgv) {
    return __awaiter(this, void 0, void 0, function* () {
        const CUSTOM_AGRUMENTS = Object.entries(CustomArgv).length !== 0 && CustomArgv.constructor === Object;
        const args = CUSTOM_AGRUMENTS ? CustomArgv : options_1.argv;
        const configRelativePath = options_1.argv._[1] ? options_1.argv._[1] : args.config;
        console.log(configRelativePath);
        if (configRelativePath) {
            const fullConfigPath = configParser_1.resolveFilePath(configRelativePath);
            const fileName = configParser_1.getNameFromPath(fullConfigPath);
            const config = configParser_1.fetchConfig(fullConfigPath);
            const parsedConfig = configParser_1.configReader(config);
            const stringifiedTable = renderTable_1.renderTable(parsedConfig, fileName);
            if (args.config)
                return parsedConfig;
            else
                process.stdout.write(stringifiedTable + '\n');
        }
        else {
            Object.keys(args).forEach((flag) => {
                if (commands_1.IGNORE_FLAGS.includes(flag)) {
                    return;
                }
                else if (commands_1.AVAILABLE_COMMANDS.includes(flag)) {
                    const flagVal = informationType(flag);
                    DETAILS_OBJ = Object.assign(Object.assign({}, DETAILS_OBJ), flagVal);
                }
                else if (commands_1.AVAILABLE_FORMATS.includes(flag)) {
                    switch (flag) {
                        case 'output-json':
                            CONFIG['json'] = true;
                            break;
                        case 'output-markdown':
                            CONFIG['markdown'] = true;
                            break;
                    }
                }
                else {
                    // Invalid option
                    process.stdout.write('\n' + chalk_1.default.bgRed(flag) + chalk_1.default.red(' is an invalid option' + '\n'));
                    return;
                }
            });
            const OUTPUT = yield envinfo.run(Object.keys(DETAILS_OBJ).length ? DETAILS_OBJ : DEFAULT_DETAILS, CONFIG);
            !CUSTOM_AGRUMENTS ? process.stdout.write(OUTPUT + '\n') : null;
            return OUTPUT;
        }
        process.exit(0);
    });
}
exports.default = info;
//# sourceMappingURL=index.js.map