"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const chalk_1 = require("chalk");
const prettyjson = require("prettyjson");
function getNameFromPath(fullPath) {
    const filename = fullPath.replace(/^.*[\\\/]/, '');
    return filename;
}
exports.getNameFromPath = getNameFromPath;
function resolveFilePath(relativeFilePath) {
    const configPath = path.resolve(process.cwd() + '/' + relativeFilePath);
    return configPath;
}
exports.resolveFilePath = resolveFilePath;
function fetchConfig(configPath) {
    let config = null;
    try {
        config = require(configPath);
    }
    catch (e) {
        process.stdout.write(chalk_1.default.red(`Error:`, e.code) + `\n` + e);
    }
    return config;
}
exports.fetchConfig = fetchConfig;
const CONFIG_SCHEMA = {
    plugins: 'Array',
};
function modifyConfig(config, key) {
    switch (CONFIG_SCHEMA[key]) {
        case 'Array':
            config[key].forEach((element, idx) => {
                config[key][idx] = Object.assign({ name: chalk_1.default.greenBright(element.constructor.name) }, element);
            });
    }
}
function configReader(config) {
    let filteredArray = [];
    const options = {
        noColor: true,
    };
    Object.keys(config).map((key) => {
        if (CONFIG_SCHEMA[key]) {
            modifyConfig(config, key);
        }
        const rowArray = [key];
        rowArray.push(prettyjson.render(config[key], options));
        filteredArray = [...filteredArray, rowArray];
    });
    return filteredArray;
}
exports.configReader = configReader;
//# sourceMappingURL=configParser.js.map